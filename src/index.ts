import electron, { app, globalShortcut, session } from 'electron';
import { BrowserWindow } from 'electron-acrylic-window';
import cmk from 'control-modifier-keys';
// This allows TypeScript to pick up the magic constant that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) {
	// eslint-disable-line global-require
	app.quit();
}

let win: BrowserWindow;

let mainScreen: electron.Display;
const [ winHeight, winWidth ] = [ 600, 800 ];

let stay = false;

const createWindow = (): void => {
	// Create the browser window.

	if (!win) {
		win = new BrowserWindow({
			height: winHeight,
			width: winWidth,
			frame: false,
			x: mainScreen.workAreaSize.width - winWidth - 20,
			y: mainScreen.workAreaSize.height - winHeight - 20,
			vibrancy: {
				theme: '#22222211',
				effect: 'acrylic',
				disableOnBlur: true,
			},
			roundedCorners: true,
			alwaysOnTop: true,
		});

		win.on('show', () => {
			win.setBounds({
				height: winHeight,
				width: winWidth,
				x: mainScreen.workAreaSize.width - winWidth - 20,
				y: mainScreen.workAreaSize.height - winHeight - 20,
			});
			cmk.setModifierState('scrolllock', true);
		});
		win.on('blur', () => {
			if (!stay) {
				win.hide();
				cmk.setModifierState('scrolllock', false);
			}
		});
	} else {
		win.show();
	}

	// and load the index.html of the app.
	win.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);
};

const openApp = async () => {
	if (stay) {
		win.hide();
		stay = false;
		return;
	}
	if (cmk.getModifierState('scrolllock')) {
		await createWindow();
		win.focus();

		stay = cmk.getModifierState('capslock');

		if (stay == true) cmk.setModifierState('capslock', false);
	}
};

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on('ready', async () => {
	session.defaultSession.webRequest.onHeadersReceived((details, callback) => {
		callback({
			responseHeaders: {
				...details.responseHeaders,
				'Content-Security-Policy': [ '' ],
			},
		});
	});

	mainScreen = electron.screen.getPrimaryDisplay();
	const shortcut = await globalShortcut.register('Scrolllock', async () => {
		await openApp();
	});

	if (!shortcut) {
		console.log('Registration Failed.');
	}

	// await createWindow();
});

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on('window-all-closed', () => {
	if (process.platform !== 'darwin') {
		app.quit();
	}
});

app.on('activate', () => {
	// On OS X it's common to re-create a window in the app when the
	// dock icon is clicked and there are no other windows open.
	if (BrowserWindow.getAllWindows().length === 0) {
		createWindow();
	}
});

app.on('will-quit', e => {
	e.preventDefault();
});

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.
